version: "3.7"
services:
  # DATABASE
  minio:
    image: minio/minio:RELEASE.2025-06-13T11-33-47Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniostorage
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - datawarehouse

  minio-client:
    image: minio/mc
    depends_on:
      - minio
    restart: "no"
    entrypoint: >
      /bin/sh -c "
        sleep 5 &&
        mc alias set local http://minio:9000 minio miniostorage &&
        mc mb -p local/bis &&
        mc policy set public local/bis;
        exit 0;
      "
    networks:
      - datawarehouse


  postgres:
    image: postgres:16.9
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: datawarehouse
      POSTGRES_USER: admin_dw
      POSTGRES_PASSWORD: admin123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin_dw"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datawarehouse

  # KAFKA
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - datawarehouse

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
    volumes:
      - ./kafka:/kafka
    networks:
      - datawarehouse
    
  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    depends_on:
      - kafka
    environment:
      KAFKA_SERVER: kafka:29092
    networks:
      - datawarehouse

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka
    restart: "no"
    entrypoint: "/bin/bash"
    command: -c "
        sleep 10 &&
        kafka-topics --create \
        --topic BIS-BUS-ARRIVAL-INFO \
        --bootstrap-server kafka:29092 \
        --replication-factor 1 \
        --partitions 1
      "
    networks:
      - datawarehouse

  # SPARK
  spark-master:
    image: bitnami/spark:3.3
    container_name: spark-master
    ports:
      - "7077:7077"
      - "8080:8080"
    environment:
      - SPARK_MODE=master
      - SPARK_EXTRA_CLASSPATH=/opt/spark/jars/*
    volumes:
      - ./spark-app:/app
      - ./jars:/opt/spark/jars
      - ./spark-conf:/opt/bitnami/spark/conf
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - datawarehouse

  spark-worker:
    image: bitnami/spark:3.3
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_EXTRA_CLASSPATH=/opt/spark/jars/*
    ports:
      - "8081:8081"
    volumes:
      - ./spark-app:/app
      - ./jars:/opt/spark/jars
      - ./spark-conf:/opt/bitnami/spark/conf
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - datawarehouse

  spark-runner:
    build:
      context: .
      dockerfile: spark-app/spark.Dockerfile
    image: my-spark:3.3-kafka
    volumes:
      - ./spark-app:/app
      - ./jars:/opt/spark/jars
      - ./spark-conf:/opt/bitnami/spark/conf
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - datawarehouse
    command: ["sleep", "infinity"]
    
  # SCHEDULER
  airflow-init:
    image: apache/airflow:2.8.1-python3.10
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin_dw:admin123@postgres/datawarehouse
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts/airflow-init.sh:/opt/airflow/airflow-init.sh
      - ./kafka:/opt/airflow/kafka
      - ./spark-app:/app
      - /var/run/docker.sock:/var/run/docker.sock
    restart: "no"
    entrypoint: ["/bin/bash", "/opt/airflow/airflow-init.sh"]
    networks:
      - datawarehouse
      
  airflow-webserver:
    container_name: airflow-webserver
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: airflow/airflow.Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin_dw:admin123@postgres/datawarehouse
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./kafka:/opt/airflow/dags/kafka
      - ./spark-app:/app
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8088:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: webserver
    networks:
      - datawarehouse
  
  airflow-scheduler:
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: airflow/airflow.Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin_dw:admin123@postgres/datawarehouse
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./kafka:/opt/airflow/dags/kafka
      - ./spark-app:/app
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    networks:
      - datawarehouse

  # VISUALIZATION
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - datawarehouse

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - datawarehouse
    

volumes:
  minio_data:
  postgres-data:

networks:
  datawarehouse:
    external: true